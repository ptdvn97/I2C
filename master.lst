CCS PCM C Compiler, Version 5.025, 5967               22-Nov-17 00:30

               Filename:   C:\Users\Dung Phan\Documents\I2C\master.lst

               ROM used:   566 words (7%)
                           Largest free fragment is 2048
               RAM used:   30 (8%) at main() level
                           39 (11%) worst case
               Stack used: 4 locations (1 in main + 3 for interrupts)
               Stack size: 8

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   203
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  BTFSS  0B.4
0018:  GOTO   01B
0019:  BTFSC  0B.1
001A:  GOTO   02C
001B:  MOVF   22,W
001C:  MOVWF  04
001D:  MOVF   23,W
001E:  MOVWF  77
001F:  MOVF   24,W
0020:  MOVWF  78
0021:  MOVF   25,W
0022:  MOVWF  79
0023:  MOVF   26,W
0024:  MOVWF  7A
0025:  MOVF   20,W
0026:  MOVWF  0A
0027:  SWAPF  21,W
0028:  MOVWF  03
0029:  SWAPF  7F,F
002A:  SWAPF  7F,W
002B:  RETFIE
002C:  BCF    0A.3
002D:  BCF    0A.4
002E:  GOTO   14A
.................... #include <master.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
....................  
.................... #list 
....................  
.................... #device ADC=10 
.................... #use delay(crystal=20000000) 
*
01D3:  MOVLW  3F
01D4:  MOVWF  04
01D5:  BCF    03.7
01D6:  MOVF   00,W
01D7:  BTFSC  03.2
01D8:  GOTO   1E6
01D9:  MOVLW  06
01DA:  MOVWF  78
01DB:  CLRF   77
01DC:  DECFSZ 77,F
01DD:  GOTO   1DC
01DE:  DECFSZ 78,F
01DF:  GOTO   1DB
01E0:  MOVLW  7B
01E1:  MOVWF  77
01E2:  DECFSZ 77,F
01E3:  GOTO   1E2
01E4:  DECFSZ 00,F
01E5:  GOTO   1D9
.................... #use i2c(Master,Fast,sda=PIN_C4,scl=PIN_C3) 
*
00CA:  MOVLW  08
00CB:  MOVWF  78
00CC:  NOP
00CD:  BCF    07.3
00CE:  BCF    28.3
00CF:  MOVF   28,W
00D0:  BSF    03.5
00D1:  MOVWF  07
00D2:  NOP
00D3:  BCF    03.5
00D4:  RLF    41,F
00D5:  BCF    07.4
00D6:  BTFSS  03.0
00D7:  GOTO   0DE
00D8:  BSF    28.4
00D9:  MOVF   28,W
00DA:  BSF    03.5
00DB:  MOVWF  07
00DC:  GOTO   0E2
00DD:  BCF    03.5
00DE:  BCF    28.4
00DF:  MOVF   28,W
00E0:  BSF    03.5
00E1:  MOVWF  07
00E2:  NOP
00E3:  BCF    03.5
00E4:  BSF    28.3
00E5:  MOVF   28,W
00E6:  BSF    03.5
00E7:  MOVWF  07
00E8:  BCF    03.5
00E9:  BTFSS  07.3
00EA:  GOTO   0E9
00EB:  DECFSZ 78,F
00EC:  GOTO   0CC
00ED:  NOP
00EE:  BCF    07.3
00EF:  BCF    28.3
00F0:  MOVF   28,W
00F1:  BSF    03.5
00F2:  MOVWF  07
00F3:  NOP
00F4:  BCF    03.5
00F5:  BSF    28.4
00F6:  MOVF   28,W
00F7:  BSF    03.5
00F8:  MOVWF  07
00F9:  NOP
00FA:  NOP
00FB:  BCF    03.5
00FC:  BSF    28.3
00FD:  MOVF   28,W
00FE:  BSF    03.5
00FF:  MOVWF  07
0100:  BCF    03.5
0101:  BTFSS  07.3
0102:  GOTO   101
0103:  CLRF   78
0104:  NOP
0105:  BTFSC  07.4
0106:  BSF    78.0
0107:  BCF    07.3
0108:  BCF    28.3
0109:  MOVF   28,W
010A:  BSF    03.5
010B:  MOVWF  07
010C:  BCF    03.5
010D:  BCF    07.4
010E:  BCF    28.4
010F:  MOVF   28,W
0110:  BSF    03.5
0111:  MOVWF  07
0112:  BCF    03.5
0113:  RETURN
....................  
....................  
....................  
.................... //Cau hinh Keypad 
.................... #define COT_1 PIN_D4 
.................... #define COT_2 PIN_D5 
.................... #define COT_3 PIN_D6 
.................... #define HANG_1 input(PIN_D0) 
.................... #define HANG_2 input(PIN_D1) 
.................... #define HANG_3 input(PIN_D2) 
.................... #define HANG_4 input(PIN_D3) 
.................... int8 value[4] = {0,0,0,0}; 
*
0210:  BCF    03.5
0211:  CLRF   29
0212:  CLRF   2A
0213:  CLRF   2B
0214:  CLRF   2C
.................... char phimnhan[12]= 
....................                { 
....................                   '1','2','3',  
....................                   '4','5','6', 
....................                   '7','8','9', 
....................                   '*','0','#', 
....................                }; 
0215:  MOVLW  31
0216:  MOVWF  2D
0217:  MOVLW  32
0218:  MOVWF  2E
0219:  MOVLW  33
021A:  MOVWF  2F
021B:  MOVLW  34
021C:  MOVWF  30
021D:  MOVLW  35
021E:  MOVWF  31
021F:  MOVLW  36
0220:  MOVWF  32
0221:  MOVLW  37
0222:  MOVWF  33
0223:  MOVLW  38
0224:  MOVWF  34
0225:  MOVLW  39
0226:  MOVWF  35
0227:  MOVLW  2A
0228:  MOVWF  36
0229:  MOVLW  30
022A:  MOVWF  37
022B:  MOVLW  23
022C:  MOVWF  38
....................                 
.................... void controlCol(int cot, int state) 
.................... { 
....................    switch(cot) 
*
002F:  MOVF   40,W
0030:  XORLW  01
0031:  BTFSC  03.2
0032:  GOTO   03A
0033:  XORLW  03
0034:  BTFSC  03.2
0035:  GOTO   044
0036:  XORLW  01
0037:  BTFSC  03.2
0038:  GOTO   04E
0039:  GOTO   057
....................    { 
....................       case 1: 
....................       { 
....................          output_bit(COT_1,state); 
003A:  MOVF   41,F
003B:  BTFSS  03.2
003C:  GOTO   03F
003D:  BCF    08.4
003E:  GOTO   040
003F:  BSF    08.4
0040:  BSF    03.5
0041:  BCF    08.4
....................          break; 
0042:  BCF    03.5
0043:  GOTO   057
....................       } 
....................       case 2: 
....................       { 
....................          output_bit(COT_2,state); 
0044:  MOVF   41,F
0045:  BTFSS  03.2
0046:  GOTO   049
0047:  BCF    08.5
0048:  GOTO   04A
0049:  BSF    08.5
004A:  BSF    03.5
004B:  BCF    08.5
....................          break; 
004C:  BCF    03.5
004D:  GOTO   057
....................       } 
....................       case 3: 
....................       { 
....................          output_bit(COT_3,state); 
004E:  MOVF   41,F
004F:  BTFSS  03.2
0050:  GOTO   053
0051:  BCF    08.6
0052:  GOTO   054
0053:  BSF    08.6
0054:  BSF    03.5
0055:  BCF    08.6
....................          break; 
0056:  BCF    03.5
....................       } 
....................        
....................    } 
0057:  RETURN
.................... } 
....................  
.................... void scanCol() 
.................... { 
....................    int i; 
....................    for(i==1;i<=3;i++) 
*
01EC:  DECFSZ 39,W
01ED:  GOTO   1EF
01EE:  GOTO   1F0
01EF:  MOVLW  00
01F0:  MOVF   39,W
01F1:  SUBLW  03
01F2:  BTFSS  03.0
01F3:  GOTO   200
01F4:  CLRF   27
01F5:  BTFSC  0B.7
01F6:  BSF    27.7
01F7:  BCF    0B.7
....................    { 
....................       controlCol(i,0); 
01F8:  MOVF   39,W
01F9:  MOVWF  40
01FA:  CLRF   41
01FB:  CALL   02F
01FC:  BTFSC  27.7
01FD:  BSF    0B.7
01FE:  INCF   39,F
01FF:  GOTO   1F0
....................    } 
0200:  BCF    0A.3
0201:  BCF    0A.4
0202:  GOTO   22E (RETURN)
.................... } 
....................  
.................... char scanKey() 
*
0058:  CLRF   3F
.................... { 
....................    int8 Key = 0; 
....................    controlCol(1,1); 
0059:  MOVLW  01
005A:  MOVWF  40
005B:  MOVWF  41
005C:  CALL   02F
....................    if(HANG_1==1) 
005D:  BSF    03.5
005E:  BSF    08.0
005F:  BCF    03.5
0060:  BTFSS  08.0
0061:  GOTO   064
....................    { 
....................       Key = 1; 
0062:  MOVLW  01
0063:  MOVWF  3F
....................    } 
....................    if(HANG_2==1) 
0064:  BSF    03.5
0065:  BSF    08.1
0066:  BCF    03.5
0067:  BTFSS  08.1
0068:  GOTO   06B
....................    { 
....................       Key = 4; 
0069:  MOVLW  04
006A:  MOVWF  3F
....................    } 
....................    if(HANG_3==1) 
006B:  BSF    03.5
006C:  BSF    08.2
006D:  BCF    03.5
006E:  BTFSS  08.2
006F:  GOTO   072
....................    { 
....................       Key = 7; 
0070:  MOVLW  07
0071:  MOVWF  3F
....................    } 
....................    if(HANG_4==1) 
0072:  BSF    03.5
0073:  BSF    08.3
0074:  BCF    03.5
0075:  BTFSS  08.3
0076:  GOTO   079
....................    { 
....................       Key = 10; 
0077:  MOVLW  0A
0078:  MOVWF  3F
....................    } 
....................    controlCol(1,0); 
0079:  MOVLW  01
007A:  MOVWF  40
007B:  CLRF   41
007C:  CALL   02F
....................    controlCol(2,1); 
007D:  MOVLW  02
007E:  MOVWF  40
007F:  MOVLW  01
0080:  MOVWF  41
0081:  CALL   02F
....................    if(HANG_1==1) 
0082:  BSF    03.5
0083:  BSF    08.0
0084:  BCF    03.5
0085:  BTFSS  08.0
0086:  GOTO   089
....................    { 
....................       Key = 2; 
0087:  MOVLW  02
0088:  MOVWF  3F
....................    } 
....................    if(HANG_2==1) 
0089:  BSF    03.5
008A:  BSF    08.1
008B:  BCF    03.5
008C:  BTFSS  08.1
008D:  GOTO   090
....................    { 
....................       Key = 5; 
008E:  MOVLW  05
008F:  MOVWF  3F
....................    } 
....................    if(HANG_3==1) 
0090:  BSF    03.5
0091:  BSF    08.2
0092:  BCF    03.5
0093:  BTFSS  08.2
0094:  GOTO   097
....................    { 
....................       Key = 8; 
0095:  MOVLW  08
0096:  MOVWF  3F
....................    } 
....................    if(HANG_4==1) 
0097:  BSF    03.5
0098:  BSF    08.3
0099:  BCF    03.5
009A:  BTFSS  08.3
009B:  GOTO   09E
....................    { 
....................       Key = 11; 
009C:  MOVLW  0B
009D:  MOVWF  3F
....................    } 
....................    controlCol(2,0); 
009E:  MOVLW  02
009F:  MOVWF  40
00A0:  CLRF   41
00A1:  CALL   02F
....................    controlCol(3,1); 
00A2:  MOVLW  03
00A3:  MOVWF  40
00A4:  MOVLW  01
00A5:  MOVWF  41
00A6:  CALL   02F
....................    if(HANG_1==1) 
00A7:  BSF    03.5
00A8:  BSF    08.0
00A9:  BCF    03.5
00AA:  BTFSS  08.0
00AB:  GOTO   0AE
....................    { 
....................       Key = 3; 
00AC:  MOVLW  03
00AD:  MOVWF  3F
....................    } 
....................    if(HANG_2==1) 
00AE:  BSF    03.5
00AF:  BSF    08.1
00B0:  BCF    03.5
00B1:  BTFSS  08.1
00B2:  GOTO   0B5
....................    { 
....................       Key = 6; 
00B3:  MOVLW  06
00B4:  MOVWF  3F
....................    } 
....................    if(HANG_3==1) 
00B5:  BSF    03.5
00B6:  BSF    08.2
00B7:  BCF    03.5
00B8:  BTFSS  08.2
00B9:  GOTO   0BC
....................    { 
....................       Key = 9; 
00BA:  MOVLW  09
00BB:  MOVWF  3F
....................    } 
....................    if(HANG_4==1) 
00BC:  BSF    03.5
00BD:  BSF    08.3
00BE:  BCF    03.5
00BF:  BTFSS  08.3
00C0:  GOTO   0C3
....................    { 
....................       Key = 12; 
00C1:  MOVLW  0C
00C2:  MOVWF  3F
....................    } 
....................    controlCol(3,0); 
00C3:  MOVLW  03
00C4:  MOVWF  40
00C5:  CLRF   41
00C6:  CALL   02F
....................    return Key; 
00C7:  MOVF   3F,W
00C8:  MOVWF  78
00C9:  RETURN
.................... } 
....................  
.................... void outputNumb(int16 number) 
.................... { 
....................    unsigned int16 temp; 
....................     
....................    temp = number;  // ex: number = 1234  
....................    value[3] = temp %10;  //  4 
....................     
....................    temp = temp/10; 
....................    value[2] = temp%10;  // 3 
....................     
....................    temp = temp/10;  
....................    value[1] = temp%10; //  2 
....................     
....................    temp = temp/10; 
....................    value[0] = temp; //  1 
.................... } 
....................  
.................... const int8 slave1 = 0x10; 
....................  
....................  
.................... void write_i2c(int8 value, int8 slave_addr) //write i2c 
.................... { 
....................    i2c_start();            // start condition 
*
0114:  BSF    28.4
0115:  MOVF   28,W
0116:  BSF    03.5
0117:  MOVWF  07
0118:  NOP
0119:  BCF    03.5
011A:  BSF    28.3
011B:  MOVF   28,W
011C:  BSF    03.5
011D:  MOVWF  07
011E:  NOP
011F:  BCF    03.5
0120:  BCF    07.4
0121:  BCF    28.4
0122:  MOVF   28,W
0123:  BSF    03.5
0124:  MOVWF  07
0125:  NOP
0126:  BCF    03.5
0127:  BCF    07.3
0128:  BCF    28.3
0129:  MOVF   28,W
012A:  BSF    03.5
012B:  MOVWF  07
....................    i2c_write(slave_addr);  // device address 
012C:  BCF    03.5
012D:  MOVF   40,W
012E:  MOVWF  41
012F:  CALL   0CA
....................    i2c_write(value);       // device data 
0130:  MOVF   3F,W
0131:  MOVWF  41
0132:  CALL   0CA
....................    i2c_stop();             // stop condition  
0133:  BCF    28.4
0134:  MOVF   28,W
0135:  BSF    03.5
0136:  MOVWF  07
0137:  NOP
0138:  BCF    03.5
0139:  BSF    28.3
013A:  MOVF   28,W
013B:  BSF    03.5
013C:  MOVWF  07
013D:  BCF    03.5
013E:  BTFSS  07.3
013F:  GOTO   13E
0140:  NOP
0141:  GOTO   142
0142:  NOP
0143:  BSF    28.4
0144:  MOVF   28,W
0145:  BSF    03.5
0146:  MOVWF  07
0147:  NOP
0148:  BCF    03.5
0149:  RETURN
.................... } 
....................  
.................... void enterNumb() 
014A:  CLRF   3C
014B:  CLRF   3D
.................... { 
....................    int key=0,temp=0; 
....................    char signal; 
....................    while(1) 
....................    { 
....................       key = scanKey(); 
014C:  CALL   058
014D:  MOVF   78,W
014E:  MOVWF  3C
....................       if(key!=0) 
014F:  MOVF   3C,F
0150:  BTFSC  03.2
0151:  GOTO   1E7
....................       { 
....................          temp=key; 
0152:  MOVF   3C,W
0153:  MOVWF  3D
....................          signal = phimnhan[temp-1]; 
0154:  MOVLW  01
0155:  SUBWF  3D,W
0156:  ADDLW  2D
0157:  MOVWF  04
0158:  BCF    03.7
0159:  MOVF   00,W
015A:  MOVWF  3E
....................          switch(signal) 
015B:  MOVF   3E,W
015C:  XORLW  31
015D:  BTFSC  03.2
015E:  GOTO   181
015F:  XORLW  03
0160:  BTFSC  03.2
0161:  GOTO   187
0162:  XORLW  01
0163:  BTFSC  03.2
0164:  GOTO   18D
0165:  XORLW  07
0166:  BTFSC  03.2
0167:  GOTO   193
0168:  XORLW  01
0169:  BTFSC  03.2
016A:  GOTO   199
016B:  XORLW  03
016C:  BTFSC  03.2
016D:  GOTO   19F
016E:  XORLW  01
016F:  BTFSC  03.2
0170:  GOTO   1A5
0171:  XORLW  0F
0172:  BTFSC  03.2
0173:  GOTO   1AB
0174:  XORLW  01
0175:  BTFSC  03.2
0176:  GOTO   1B1
0177:  XORLW  09
0178:  BTFSC  03.2
0179:  GOTO   1B7
017A:  XORLW  1A
017B:  BTFSC  03.2
017C:  GOTO   1BC
017D:  XORLW  09
017E:  BTFSC  03.2
017F:  GOTO   1C2
0180:  GOTO   1C8
....................          { 
....................             case '1': 
....................             { 
....................                write_i2c(1,slave1); 
0181:  MOVLW  01
0182:  MOVWF  3F
0183:  MOVLW  10
0184:  MOVWF  40
0185:  CALL   114
....................                break; 
0186:  GOTO   1CD
....................             } 
....................             case '2': 
....................             { 
....................                write_i2c(2,slave1); 
0187:  MOVLW  02
0188:  MOVWF  3F
0189:  MOVLW  10
018A:  MOVWF  40
018B:  CALL   114
....................                break; 
018C:  GOTO   1CD
....................             } 
....................             case '3': 
....................             { 
....................                write_i2c(3,slave1); 
018D:  MOVLW  03
018E:  MOVWF  3F
018F:  MOVLW  10
0190:  MOVWF  40
0191:  CALL   114
....................                break; 
0192:  GOTO   1CD
....................             } 
....................             case '4': 
....................             { 
....................                write_i2c(4,slave1); 
0193:  MOVLW  04
0194:  MOVWF  3F
0195:  MOVLW  10
0196:  MOVWF  40
0197:  CALL   114
....................                break; 
0198:  GOTO   1CD
....................             } 
....................             case '5': 
....................             { 
....................                write_i2c(5,slave1); 
0199:  MOVLW  05
019A:  MOVWF  3F
019B:  MOVLW  10
019C:  MOVWF  40
019D:  CALL   114
....................                break; 
019E:  GOTO   1CD
....................             } 
....................             case '6': 
....................             { 
....................                write_i2c(6,slave1); 
019F:  MOVLW  06
01A0:  MOVWF  3F
01A1:  MOVLW  10
01A2:  MOVWF  40
01A3:  CALL   114
....................                break; 
01A4:  GOTO   1CD
....................             } 
....................             case '7': 
....................             { 
....................                write_i2c(7,slave1); 
01A5:  MOVLW  07
01A6:  MOVWF  3F
01A7:  MOVLW  10
01A8:  MOVWF  40
01A9:  CALL   114
....................                break; 
01AA:  GOTO   1CD
....................             } 
....................             case '8': 
....................             { 
....................                write_i2c(8,slave1); 
01AB:  MOVLW  08
01AC:  MOVWF  3F
01AD:  MOVLW  10
01AE:  MOVWF  40
01AF:  CALL   114
....................                break; 
01B0:  GOTO   1CD
....................             } 
....................             case '9': 
....................             { 
....................                write_i2c(9,slave1); 
01B1:  MOVLW  09
01B2:  MOVWF  3F
01B3:  MOVLW  10
01B4:  MOVWF  40
01B5:  CALL   114
....................                break; 
01B6:  GOTO   1CD
....................             } 
....................             case '0': 
....................             { 
....................                write_i2c(0,slave1); 
01B7:  CLRF   3F
01B8:  MOVLW  10
01B9:  MOVWF  40
01BA:  CALL   114
....................                break; 
01BB:  GOTO   1CD
....................             } 
....................             case '*': 
....................             { 
....................                write_i2c(10,slave1); 
01BC:  MOVLW  0A
01BD:  MOVWF  3F
01BE:  MOVLW  10
01BF:  MOVWF  40
01C0:  CALL   114
....................                break; 
01C1:  GOTO   1CD
....................             } 
....................             case '#': 
....................             { 
....................                write_i2c(11,slave1); 
01C2:  MOVLW  0B
01C3:  MOVWF  3F
01C4:  MOVLW  10
01C5:  MOVWF  40
01C6:  CALL   114
....................                break; 
01C7:  GOTO   1CD
....................             } 
....................             default: 
....................             { 
....................                write_i2c(99,slave1); 
01C8:  MOVLW  63
01C9:  MOVWF  3F
01CA:  MOVLW  10
01CB:  MOVWF  40
01CC:  CALL   114
....................                break; 
....................             } 
....................          } 
....................          while(scanKey()!=0) 
01CD:  CALL   058
01CE:  MOVF   78,F
01CF:  BTFSC  03.2
01D0:  GOTO   1E7
....................          {delay_ms(5);} 
01D1:  MOVLW  05
01D2:  MOVWF  3F
*
01E6:  GOTO   1CD
....................       } 
01E7:  GOTO   14C
....................    } 
.................... } 
....................  
.................... void main() 
*
0203:  MOVF   03,W
0204:  ANDLW  1F
0205:  MOVWF  03
0206:  MOVLW  FF
0207:  MOVWF  28
0208:  BSF    03.5
0209:  BSF    1F.0
020A:  BSF    1F.1
020B:  BSF    1F.2
020C:  BCF    1F.3
020D:  MOVLW  07
020E:  MOVWF  1C
020F:  BCF    03.7
.................... { 
....................    scanCol(); 
*
022D:  GOTO   1EC
....................    enable_interrupts(INT_EXT); 
022E:  BSF    0B.4
....................    enable_interrupts(INT_EXT_H2L); 
022F:  BSF    0B.4
0230:  BSF    03.5
0231:  BCF    01.6
....................    enable_interrupts(GLOBAL); 
0232:  MOVLW  C0
0233:  BCF    03.5
0234:  IORWF  0B,F
.................... } 
....................  
.................... #INT_EXT 
.................... void ngatNgoai() 
0235:  SLEEP
.................... { 
....................    enterNumb(); 
*
01E8:  BCF    0B.1
01E9:  BCF    0A.3
01EA:  BCF    0A.4
01EB:  GOTO   01B
.................... } 

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
