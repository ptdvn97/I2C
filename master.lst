CCS PCM C Compiler, Version 5.025, 5967               21-Nov-17 21:05

               Filename:   C:\Users\Dung Phan\Documents\I2C\master.lst

               ROM used:   209 words (3%)
                           Largest free fragment is 2048
               RAM used:   13 (4%) at main() level
                           16 (4%) worst case
               Stack used: 2 locations (0 in main + 2 for interrupts)
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   0B6
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  BTFSS  0B.4
0018:  GOTO   01B
0019:  BTFSC  0B.1
001A:  GOTO   02C
001B:  MOVF   22,W
001C:  MOVWF  04
001D:  MOVF   23,W
001E:  MOVWF  77
001F:  MOVF   24,W
0020:  MOVWF  78
0021:  MOVF   25,W
0022:  MOVWF  79
0023:  MOVF   26,W
0024:  MOVWF  7A
0025:  MOVF   20,W
0026:  MOVWF  0A
0027:  SWAPF  21,W
0028:  MOVWF  03
0029:  SWAPF  7F,F
002A:  SWAPF  7F,W
002B:  RETFIE
002C:  BCF    0A.3
002D:  BCF    0A.4
002E:  GOTO   079
.................... #include <master.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
....................  
.................... #list 
....................  
.................... #device ADC=10 
.................... #use delay(crystal=20000000) 
.................... #use i2c(Master,Fast,sda=PIN_C4,scl=PIN_C3) 
002F:  MOVLW  08
0030:  MOVWF  78
0031:  NOP
0032:  BCF    07.3
0033:  BCF    27.3
0034:  MOVF   27,W
0035:  BSF    03.5
0036:  MOVWF  07
0037:  NOP
0038:  BCF    03.5
0039:  RLF    2A,F
003A:  BCF    07.4
003B:  BTFSS  03.0
003C:  GOTO   043
003D:  BSF    27.4
003E:  MOVF   27,W
003F:  BSF    03.5
0040:  MOVWF  07
0041:  GOTO   047
0042:  BCF    03.5
0043:  BCF    27.4
0044:  MOVF   27,W
0045:  BSF    03.5
0046:  MOVWF  07
0047:  NOP
0048:  BCF    03.5
0049:  BSF    27.3
004A:  MOVF   27,W
004B:  BSF    03.5
004C:  MOVWF  07
004D:  BCF    03.5
004E:  BTFSS  07.3
004F:  GOTO   04E
0050:  DECFSZ 78,F
0051:  GOTO   031
0052:  NOP
0053:  BCF    07.3
0054:  BCF    27.3
0055:  MOVF   27,W
0056:  BSF    03.5
0057:  MOVWF  07
0058:  NOP
0059:  BCF    03.5
005A:  BSF    27.4
005B:  MOVF   27,W
005C:  BSF    03.5
005D:  MOVWF  07
005E:  NOP
005F:  NOP
0060:  BCF    03.5
0061:  BSF    27.3
0062:  MOVF   27,W
0063:  BSF    03.5
0064:  MOVWF  07
0065:  BCF    03.5
0066:  BTFSS  07.3
0067:  GOTO   066
0068:  CLRF   78
0069:  NOP
006A:  BTFSC  07.4
006B:  BSF    78.0
006C:  BCF    07.3
006D:  BCF    27.3
006E:  MOVF   27,W
006F:  BSF    03.5
0070:  MOVWF  07
0071:  BCF    03.5
0072:  BCF    07.4
0073:  BCF    27.4
0074:  MOVF   27,W
0075:  BSF    03.5
0076:  MOVWF  07
0077:  BCF    03.5
0078:  RETURN
....................  
....................  
....................  
.................... const int8 slave1 = 0x10; 
....................  
....................  
.................... void write_i2c(int8 value, int8 slave_addr) //write i2c 
.................... { 
....................    i2c_start();            // start condition 
*
007D:  BSF    27.4
007E:  MOVF   27,W
007F:  BSF    03.5
0080:  MOVWF  07
0081:  NOP
0082:  BCF    03.5
0083:  BSF    27.3
0084:  MOVF   27,W
0085:  BSF    03.5
0086:  MOVWF  07
0087:  NOP
0088:  BCF    03.5
0089:  BCF    07.4
008A:  BCF    27.4
008B:  MOVF   27,W
008C:  BSF    03.5
008D:  MOVWF  07
008E:  NOP
008F:  BCF    03.5
0090:  BCF    07.3
0091:  BCF    27.3
0092:  MOVF   27,W
0093:  BSF    03.5
0094:  MOVWF  07
....................    i2c_write(slave_addr);  // device address 
0095:  BCF    03.5
0096:  MOVF   29,W
0097:  MOVWF  2A
0098:  CALL   02F
....................    i2c_write(value);       // device data 
0099:  MOVF   28,W
009A:  MOVWF  2A
009B:  CALL   02F
....................    i2c_stop();             // stop condition  
009C:  BCF    27.4
009D:  MOVF   27,W
009E:  BSF    03.5
009F:  MOVWF  07
00A0:  NOP
00A1:  BCF    03.5
00A2:  BSF    27.3
00A3:  MOVF   27,W
00A4:  BSF    03.5
00A5:  MOVWF  07
00A6:  BCF    03.5
00A7:  BTFSS  07.3
00A8:  GOTO   0A7
00A9:  NOP
00AA:  GOTO   0AB
00AB:  NOP
00AC:  BSF    27.4
00AD:  MOVF   27,W
00AE:  BSF    03.5
00AF:  MOVWF  07
00B0:  NOP
.................... } 
....................  
.................... void main() 
*
00B6:  MOVF   03,W
00B7:  ANDLW  1F
00B8:  MOVWF  03
00B9:  MOVLW  FF
00BA:  MOVWF  27
00BB:  BSF    03.5
00BC:  BSF    1F.0
00BD:  BSF    1F.1
00BE:  BSF    1F.2
00BF:  BCF    1F.3
00C0:  MOVLW  07
00C1:  MOVWF  1C
00C2:  BCF    03.7
.................... { 
....................    output_bit(PIN_D0,0); 
00C3:  BCF    03.5
00C4:  BCF    08.0
00C5:  BSF    03.5
00C6:  BCF    08.0
....................    enable_interrupts(INT_EXT); 
00C7:  BCF    03.5
00C8:  BSF    0B.4
....................    enable_interrupts(INT_EXT_H2L); 
00C9:  BSF    0B.4
00CA:  BSF    03.5
00CB:  BCF    01.6
....................    enable_interrupts(GLOBAL); 
00CC:  MOVLW  C0
00CD:  BCF    03.5
00CE:  IORWF  0B,F
....................    while(TRUE) 
....................    {} 
00CF:  GOTO   0CF
....................  
.................... } 
....................  
.................... #INT_EXT 
.................... void ngatNgoai() 
00D0:  SLEEP
.................... { 
....................    write_i2c(1,slave1); 
*
0079:  MOVLW  01
007A:  MOVWF  28
007B:  MOVLW  10
007C:  MOVWF  29
*
00B1:  BCF    03.5
00B2:  BCF    0B.1
00B3:  BCF    0A.3
00B4:  BCF    0A.4
00B5:  GOTO   01B
.................... } 

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
